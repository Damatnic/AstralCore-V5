
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.AdminProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminLevel: 'adminLevel',
  departments: 'departments',
  permissions: 'permissions',
  employeeId: 'employeeId',
  department: 'department',
  managerUserId: 'managerUserId',
  canModerateUsers: 'canModerateUsers',
  canManageHelpers: 'canManageHelpers',
  canAccessAnalytics: 'canAccessAnalytics',
  canManageContent: 'canManageContent',
  canHandleCrisis: 'canHandleCrisis',
  canManageSystem: 'canManageSystem',
  actionsPerformed: 'actionsPerformed',
  lastModerationAction: 'lastModerationAction',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnonymousIdentityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  displayName: 'displayName',
  avatar: 'avatar',
  colorTheme: 'colorTheme',
  trustScore: 'trustScore',
  badges: 'badges',
  languages: 'languages',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  professionalId: 'professionalId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  type: 'type',
  status: 'status',
  encryptedNotes: 'encryptedNotes',
  meetingUrl: 'meetingUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  outcome: 'outcome',
  timestamp: 'timestamp'
};

exports.Prisma.ChallengeParticipationScalarFieldEnum = {
  id: 'id',
  challengeId: 'challengeId',
  userId: 'userId',
  points: 'points',
  streak: 'streak',
  completionRate: 'completionRate',
  completedTasks: 'completedTasks',
  achievements: 'achievements',
  joinedAt: 'joinedAt',
  lastActivityAt: 'lastActivityAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  authorId: 'authorId',
  content: 'content',
  type: 'type',
  edited: 'edited',
  editedAt: 'editedAt',
  reactions: 'reactions',
  flags: 'flags',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ChatModeratorScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  assignedAt: 'assignedAt',
  permissions: 'permissions'
};

exports.Prisma.ChatParticipantScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  topic: 'topic',
  description: 'description',
  maxParticipants: 'maxParticipants',
  isActive: 'isActive',
  language: 'language',
  rules: 'rules',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActivity: 'lastActivity'
};

exports.Prisma.CommunityPostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  category: 'category',
  isAnonymous: 'isAnonymous',
  isPinned: 'isPinned',
  isModerated: 'isModerated',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  parentId: 'parentId',
  content: 'content',
  isAnonymous: 'isAnonymous',
  isModerated: 'isModerated',
  likeCount: 'likeCount',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrisisReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  severityLevel: 'severityLevel',
  triggerType: 'triggerType',
  interventionType: 'interventionType',
  encryptedDetails: 'encryptedDetails',
  responseTime: 'responseTime',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  emergencyContactUsed: 'emergencyContactUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  email: 'email',
  expires: 'expires',
  verified: 'verified',
  createdAt: 'createdAt'
};

exports.Prisma.GroupActivityScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  type: 'type',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  duration: 'duration',
  completedBy: 'completedBy',
  createdAt: 'createdAt'
};

exports.Prisma.GroupMembershipScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive'
};

exports.Prisma.GroupSessionScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  actualStart: 'actualStart',
  actualEnd: 'actualEnd',
  attendees: 'attendees',
  notes: 'notes',
  recordings: 'recordings',
  status: 'status'
};

exports.Prisma.HelperProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  specializations: 'specializations',
  credentials: 'credentials',
  experience: 'experience',
  approach: 'approach',
  languages: 'languages',
  availability: 'availability',
  timezone: 'timezone',
  maxClients: 'maxClients',
  currentClients: 'currentClients',
  acceptingClients: 'acceptingClients',
  isVerified: 'isVerified',
  verificationDate: 'verificationDate',
  verifiedBy: 'verifiedBy',
  rating: 'rating',
  totalReviews: 'totalReviews',
  backgroundCheckCompleted: 'backgroundCheckCompleted',
  backgroundCheckDate: 'backgroundCheckDate',
  requiredTrainingCompleted: 'requiredTrainingCompleted',
  trainingCompletionDate: 'trainingCompletionDate',
  trainingCertificates: 'trainingCertificates',
  totalSessions: 'totalSessions',
  responseTime: 'responseTime',
  lastActiveAt: 'lastActiveAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HelperReviewScalarFieldEnum = {
  id: 'id',
  helperId: 'helperId',
  reviewerId: 'reviewerId',
  sessionId: 'sessionId',
  rating: 'rating',
  comment: 'comment',
  categories: 'categories',
  isAnonymous: 'isAnonymous',
  isVerified: 'isVerified',
  helpfulVotes: 'helpfulVotes',
  reportCount: 'reportCount',
  isHidden: 'isHidden',
  createdAt: 'createdAt'
};

exports.Prisma.JournalEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  encryptedTitle: 'encryptedTitle',
  encryptedContent: 'encryptedContent',
  encryptedTags: 'encryptedTags',
  isPrivate: 'isPrivate',
  sentiment: 'sentiment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MentorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specializations: 'specializations',
  experience: 'experience',
  approach: 'approach',
  availability: 'availability',
  languages: 'languages',
  maxMentees: 'maxMentees',
  currentMentees: 'currentMentees',
  rating: 'rating',
  verified: 'verified',
  trainingCompleted: 'trainingCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MentorReviewScalarFieldEnum = {
  id: 'id',
  mentorId: 'mentorId',
  reviewerId: 'reviewerId',
  rating: 'rating',
  comment: 'comment',
  helpful: 'helpful',
  verified: 'verified',
  createdAt: 'createdAt'
};

exports.Prisma.MentorshipScalarFieldEnum = {
  id: 'id',
  mentorId: 'mentorId',
  menteeId: 'menteeId',
  topics: 'topics',
  goals: 'goals',
  status: 'status',
  matchedAt: 'matchedAt',
  endedAt: 'endedAt'
};

exports.Prisma.MentorshipSessionScalarFieldEnum = {
  id: 'id',
  mentorshipId: 'mentorshipId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  topic: 'topic',
  goals: 'goals',
  notes: 'notes',
  resources: 'resources',
  feedback: 'feedback',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ModerationActionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  targetUserId: 'targetUserId',
  moderatorId: 'moderatorId',
  reason: 'reason',
  evidence: 'evidence',
  duration: 'duration',
  appealable: 'appealable',
  appealed: 'appealed',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.MoodEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  moodScore: 'moodScore',
  anxietyLevel: 'anxietyLevel',
  energyLevel: 'energyLevel',
  encryptedNotes: 'encryptedNotes',
  encryptedTags: 'encryptedTags',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  isPriority: 'isPriority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  isAnonymous: 'isAnonymous',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActivity: 'lastActivity',
  metadata: 'metadata'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive',
  isMuted: 'isMuted',
  lastReadAt: 'lastReadAt',
  role: 'role'
};

exports.Prisma.DirectMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  content: 'content',
  type: 'type',
  isEdited: 'isEdited',
  isDeleted: 'isDeleted',
  metadata: 'metadata',
  reactions: 'reactions',
  createdAt: 'createdAt',
  editedAt: 'editedAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expires: 'expires',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.SafetyAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  severity: 'severity',
  userId: 'userId',
  context: 'context',
  indicators: 'indicators',
  handled: 'handled',
  handledBy: 'handledBy',
  actions: 'actions',
  notes: 'notes',
  detectedAt: 'detectedAt',
  handledAt: 'handledAt'
};

exports.Prisma.SafetyPlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  warningSignsEncrypted: 'warningSignsEncrypted',
  copingStrategiesEncrypted: 'copingStrategiesEncrypted',
  supportContactsEncrypted: 'supportContactsEncrypted',
  safeEnvironmentEncrypted: 'safeEnvironmentEncrypted',
  reasonsToLiveEncrypted: 'reasonsToLiveEncrypted',
  isActive: 'isActive',
  lastReviewedAt: 'lastReviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  topic: 'topic',
  description: 'description',
  facilitatorId: 'facilitatorId',
  maxMembers: 'maxMembers',
  type: 'type',
  privacy: 'privacy',
  schedule: 'schedule',
  requirements: 'requirements',
  resources: 'resources',
  tags: 'tags',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  helperId: 'helperId',
  sessionType: 'sessionType',
  status: 'status',
  encryptedNotes: 'encryptedNotes',
  rating: 'rating',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TrustMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  score: 'score',
  level: 'level',
  factors: 'factors',
  history: 'history',
  restrictions: 'restrictions',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  anonymousId: 'anonymousId',
  email: 'email',
  hashedPassword: 'hashedPassword',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  isEmailVerified: 'isEmailVerified',
  isTwoFactorEnabled: 'isTwoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  phoneNumber: 'phoneNumber',
  dateOfBirth: 'dateOfBirth',
  dataRetentionDays: 'dataRetentionDays',
  allowAnalytics: 'allowAnalytics',
  timezone: 'timezone',
  preferredLanguage: 'preferredLanguage',
  privacySettings: 'privacySettings',
  lastLoginAt: 'lastLoginAt',
  lastActiveAt: 'lastActiveAt',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mentalHealthGoals: 'mentalHealthGoals',
  interestedTopics: 'interestedTopics',
  preferredCommunication: 'preferredCommunication',
  crisisContacts: 'crisisContacts',
  medicalInfo: 'medicalInfo',
  therapyHistory: 'therapyHistory',
  notificationSettings: 'notificationSettings',
  privacyLevel: 'privacyLevel',
  shareDataForResearch: 'shareDataForResearch',
  onboardingCompleted: 'onboardingCompleted',
  wellnessScore: 'wellnessScore',
  lastAssessmentAt: 'lastAssessmentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.WellnessChallengeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  difficulty: 'difficulty',
  duration: 'duration',
  goals: 'goals',
  rewards: 'rewards',
  dailyTasks: 'dailyTasks',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TherapistClientScalarFieldEnum = {
  id: 'id',
  therapistId: 'therapistId',
  clientNumber: 'clientNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  addressEncrypted: 'addressEncrypted',
  emergencyContactEncrypted: 'emergencyContactEncrypted',
  intakeDate: 'intakeDate',
  lastSessionDate: 'lastSessionDate',
  nextSessionDate: 'nextSessionDate',
  status: 'status',
  riskLevel: 'riskLevel',
  primaryDiagnosis: 'primaryDiagnosis',
  secondaryDiagnoses: 'secondaryDiagnoses',
  treatmentModality: 'treatmentModality',
  sessionFrequency: 'sessionFrequency',
  totalSessions: 'totalSessions',
  completedSessions: 'completedSessions',
  missedSessions: 'missedSessions',
  progress: 'progress',
  treatmentGoalsEncrypted: 'treatmentGoalsEncrypted',
  medicationsEncrypted: 'medicationsEncrypted',
  allergies: 'allergies',
  insuranceInfoEncrypted: 'insuranceInfoEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TherapistSessionScalarFieldEnum = {
  id: 'id',
  therapistId: 'therapistId',
  clientId: 'clientId',
  scheduledTime: 'scheduledTime',
  duration: 'duration',
  type: 'type',
  sessionType: 'sessionType',
  status: 'status',
  billingCode: 'billingCode',
  fee: 'fee',
  copay: 'copay',
  insuranceClaim: 'insuranceClaim',
  notesEncrypted: 'notesEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TherapySessionNoteScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  therapistId: 'therapistId',
  clientId: 'clientId',
  sessionDate: 'sessionDate',
  sessionType: 'sessionType',
  sessionDuration: 'sessionDuration',
  treatmentModality: 'treatmentModality',
  sessionGoalsEncrypted: 'sessionGoalsEncrypted',
  progressNotesEncrypted: 'progressNotesEncrypted',
  interventionsEncrypted: 'interventionsEncrypted',
  clientResponseEncrypted: 'clientResponseEncrypted',
  homeworkEncrypted: 'homeworkEncrypted',
  nextSessionPlanEncrypted: 'nextSessionPlanEncrypted',
  riskAssessment: 'riskAssessment',
  confidentialityNotesEncrypted: 'confidentialityNotesEncrypted',
  supervisorReview: 'supervisorReview',
  supervisorId: 'supervisorId',
  billable: 'billable',
  insuranceCode: 'insuranceCode',
  isTemplate: 'isTemplate',
  tags: 'tags',
  attachmentsEncrypted: 'attachmentsEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastModified: 'lastModified'
};

exports.Prisma.TherapistClinicalNoteScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  therapistId: 'therapistId',
  date: 'date',
  type: 'type',
  contentEncrypted: 'contentEncrypted',
  riskAssessment: 'riskAssessment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TherapistAssessmentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  therapistId: 'therapistId',
  type: 'type',
  date: 'date',
  scoreEncrypted: 'scoreEncrypted',
  interpretationEncrypted: 'interpretationEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileStorageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  path: 'path',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  type: 'type',
  parentId: 'parentId',
  isEncrypted: 'isEncrypted',
  encryptionKey: 'encryptionKey',
  isShared: 'isShared',
  isPublic: 'isPublic',
  isStarred: 'isStarred',
  tags: 'tags',
  version: 'version',
  metadata: 'metadata',
  virusScanStatus: 'virusScanStatus',
  virusScanDate: 'virusScanDate',
  uploadStatus: 'uploadStatus',
  uploadProgress: 'uploadProgress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastAccessedAt: 'lastAccessedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationDeliveryScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  channel: 'channel',
  status: 'status',
  attemptCount: 'attemptCount',
  lastAttemptAt: 'lastAttemptAt',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.DataExportJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  format: 'format',
  status: 'status',
  filters: 'filters',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  progress: 'progress',
  errorMessage: 'errorMessage',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.TranslationCacheScalarFieldEnum = {
  id: 'id',
  sourceText: 'sourceText',
  sourceLang: 'sourceLang',
  targetLang: 'targetLang',
  translation: 'translation',
  provider: 'provider',
  confidence: 'confidence',
  usageCount: 'usageCount',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AccessibilityPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fontSize: 'fontSize',
  contrast: 'contrast',
  colorScheme: 'colorScheme',
  reduceMotion: 'reduceMotion',
  screenReaderMode: 'screenReaderMode',
  keyboardNavigation: 'keyboardNavigation',
  focusIndicators: 'focusIndicators',
  audioDescriptions: 'audioDescriptions',
  captionsEnabled: 'captionsEnabled',
  language: 'language',
  readingSpeed: 'readingSpeed',
  customCSS: 'customCSS',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfflineDataScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dataType: 'dataType',
  data: 'data',
  version: 'version',
  syncStatus: 'syncStatus',
  deviceId: 'deviceId',
  lastModified: 'lastModified',
  syncedAt: 'syncedAt',
  conflictData: 'conflictData',
  createdAt: 'createdAt'
};

exports.Prisma.SearchIndexScalarFieldEnum = {
  id: 'id',
  contentType: 'contentType',
  contentId: 'contentId',
  title: 'title',
  content: 'content',
  tags: 'tags',
  metadata: 'metadata',
  visibility: 'visibility',
  weight: 'weight',
  lastIndexed: 'lastIndexed',
  createdAt: 'createdAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  path: 'path',
  thumbnailPath: 'thumbnailPath',
  encryptionKey: 'encryptionKey',
  isEncrypted: 'isEncrypted',
  virusScanStatus: 'virusScanStatus',
  virusScanDate: 'virusScanDate',
  metadata: 'metadata',
  tags: 'tags',
  category: 'category',
  version: 'version',
  previousVersionId: 'previousVersionId',
  isPublic: 'isPublic',
  expiresAt: 'expiresAt',
  downloadCount: 'downloadCount',
  lastAccessedAt: 'lastAccessedAt',
  checksum: 'checksum',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileShareScalarFieldEnum = {
  id: 'id',
  fileId: 'fileId',
  sharedById: 'sharedById',
  sharedWithId: 'sharedWithId',
  permission: 'permission',
  shareToken: 'shareToken',
  password: 'password',
  expiresAt: 'expiresAt',
  accessCount: 'accessCount',
  lastAccessedAt: 'lastAccessedAt',
  createdAt: 'createdAt'
};

exports.Prisma.FileVersionScalarFieldEnum = {
  id: 'id',
  fileId: 'fileId',
  version: 'version',
  path: 'path',
  size: 'size',
  checksum: 'checksum',
  changedBy: 'changedBy',
  changeNotes: 'changeNotes',
  createdAt: 'createdAt'
};

exports.Prisma.FileAccessLogScalarFieldEnum = {
  id: 'id',
  fileId: 'fileId',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  errorMsg: 'errorMsg',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  subject: 'subject',
  contentTemplate: 'contentTemplate',
  channels: 'channels',
  priority: 'priority',
  variables: 'variables',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  pushEnabled: 'pushEnabled',
  inAppEnabled: 'inAppEnabled',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  categories: 'categories',
  frequency: 'frequency',
  language: 'language',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationQueueScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  templateId: 'templateId',
  channel: 'channel',
  recipient: 'recipient',
  subject: 'subject',
  content: 'content',
  metadata: 'metadata',
  priority: 'priority',
  status: 'status',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  failureReason: 'failureReason',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  queueId: 'queueId',
  templateId: 'templateId',
  channel: 'channel',
  recipient: 'recipient',
  content: 'content',
  status: 'status',
  deliveredAt: 'deliveredAt',
  openedAt: 'openedAt',
  clickedAt: 'clickedAt',
  errorDetails: 'errorDetails',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ExportJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  format: 'format',
  status: 'status',
  progress: 'progress',
  filters: 'filters',
  options: 'options',
  fileSize: 'fileSize',
  filePath: 'filePath',
  downloadUrl: 'downloadUrl',
  expiresAt: 'expiresAt',
  error: 'error',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  downloadCount: 'downloadCount',
  lastDownloadAt: 'lastDownloadAt',
  createdAt: 'createdAt'
};

exports.Prisma.FileQuotaScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  maxStorage: 'maxStorage',
  usedStorage: 'usedStorage',
  maxFileSize: 'maxFileSize',
  maxFiles: 'maxFiles',
  fileCount: 'fileCount',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  sessionTokenIV: 'sessionTokenIV',
  sessionTokenAuthTag: 'sessionTokenAuthTag',
  refreshToken: 'refreshToken',
  refreshTokenIV: 'refreshTokenIV',
  refreshTokenAuthTag: 'refreshTokenAuthTag',
  status: 'status',
  mfaVerified: 'mfaVerified',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceFingerprint: 'deviceFingerprint',
  lastActivity: 'lastActivity',
  idleExpiresAt: 'idleExpiresAt',
  absoluteExpiresAt: 'absoluteExpiresAt',
  expiresAt: 'expiresAt',
  terminatedAt: 'terminatedAt',
  terminationReason: 'terminationReason',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionActivityScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  activityType: 'activityType',
  resource: 'resource',
  ipAddress: 'ipAddress',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.SessionEventLogScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  eventType: 'eventType',
  eventData: 'eventData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.ConcurrentSessionLimitScalarFieldEnum = {
  id: 'id',
  role: 'role',
  maxSessions: 'maxSessions',
  enforced: 'enforced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TemporaryPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  grantedBy: 'grantedBy',
  resource: 'resource',
  action: 'action',
  conditions: 'conditions',
  reason: 'reason',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  revokedAt: 'revokedAt',
  revokedBy: 'revokedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionOverrideScalarFieldEnum = {
  id: 'id',
  role: 'role',
  resource: 'resource',
  action: 'action',
  allowed: 'allowed',
  conditions: 'conditions',
  reason: 'reason',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceOwnershipScalarFieldEnum = {
  id: 'id',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  transferredFrom: 'transferredFrom',
  transferredAt: 'transferredAt'
};

exports.Prisma.PermissionCheckAuditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userRole: 'userRole',
  resource: 'resource',
  action: 'action',
  resourceId: 'resourceId',
  allowed: 'allowed',
  reason: 'reason',
  checkType: 'checkType',
  context: 'context',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.RoleHierarchyScalarFieldEnum = {
  id: 'id',
  parentRole: 'parentRole',
  childRole: 'childRole',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AdminLevel = exports.$Enums.AdminLevel = {
  MODERATOR: 'MODERATOR',
  MANAGER: 'MANAGER',
  ADMINISTRATOR: 'ADMINISTRATOR',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  HELPER: 'HELPER',
  THERAPIST: 'THERAPIST',
  CRISIS_COUNSELOR: 'CRISIS_COUNSELOR',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.ClientStatus = exports.$Enums.ClientStatus = {
  INTAKE: 'INTAKE',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  TERMINATED: 'TERMINATED',
  NO_SHOW: 'NO_SHOW'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MODERATE: 'MODERATE',
  HIGH: 'HIGH',
  CRISIS: 'CRISIS'
};

exports.SessionType = exports.$Enums.SessionType = {
  VIDEO: 'VIDEO',
  IN_PERSON: 'IN_PERSON',
  PHONE: 'PHONE'
};

exports.SessionCategory = exports.$Enums.SessionCategory = {
  INDIVIDUAL: 'INDIVIDUAL',
  GROUP: 'GROUP',
  FAMILY: 'FAMILY',
  COUPLES: 'COUPLES'
};

exports.TherapySessionStatus = exports.$Enums.TherapySessionStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.NoteType = exports.$Enums.NoteType = {
  INTAKE: 'INTAKE',
  PROGRESS: 'PROGRESS',
  TREATMENT_PLAN: 'TREATMENT_PLAN',
  CRISIS: 'CRISIS',
  DISCHARGE: 'DISCHARGE'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  ACTIVE: 'ACTIVE',
  IDLE: 'IDLE',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED',
  LOCKED: 'LOCKED'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  AdminProfile: 'AdminProfile',
  AnonymousIdentity: 'AnonymousIdentity',
  Appointment: 'Appointment',
  AuditLog: 'AuditLog',
  ChallengeParticipation: 'ChallengeParticipation',
  ChatMessage: 'ChatMessage',
  ChatModerator: 'ChatModerator',
  ChatParticipant: 'ChatParticipant',
  ChatRoom: 'ChatRoom',
  CommunityPost: 'CommunityPost',
  Comment: 'Comment',
  CrisisReport: 'CrisisReport',
  EmailVerification: 'EmailVerification',
  GroupActivity: 'GroupActivity',
  GroupMembership: 'GroupMembership',
  GroupSession: 'GroupSession',
  HelperProfile: 'HelperProfile',
  HelperReview: 'HelperReview',
  JournalEntry: 'JournalEntry',
  MentorProfile: 'MentorProfile',
  MentorReview: 'MentorReview',
  Mentorship: 'Mentorship',
  MentorshipSession: 'MentorshipSession',
  ModerationAction: 'ModerationAction',
  MoodEntry: 'MoodEntry',
  Notification: 'Notification',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  DirectMessage: 'DirectMessage',
  PasswordReset: 'PasswordReset',
  SafetyAlert: 'SafetyAlert',
  SafetyPlan: 'SafetyPlan',
  SupportGroup: 'SupportGroup',
  SupportSession: 'SupportSession',
  TrustMetric: 'TrustMetric',
  User: 'User',
  UserProfile: 'UserProfile',
  VerificationToken: 'VerificationToken',
  WellnessChallenge: 'WellnessChallenge',
  TherapistClient: 'TherapistClient',
  TherapistSession: 'TherapistSession',
  TherapySessionNote: 'TherapySessionNote',
  TherapistClinicalNote: 'TherapistClinicalNote',
  TherapistAssessment: 'TherapistAssessment',
  FileStorage: 'FileStorage',
  NotificationDelivery: 'NotificationDelivery',
  DataExportJob: 'DataExportJob',
  TranslationCache: 'TranslationCache',
  AccessibilityPreference: 'AccessibilityPreference',
  OfflineData: 'OfflineData',
  SearchIndex: 'SearchIndex',
  File: 'File',
  FileShare: 'FileShare',
  FileVersion: 'FileVersion',
  FileAccessLog: 'FileAccessLog',
  NotificationTemplate: 'NotificationTemplate',
  NotificationPreference: 'NotificationPreference',
  NotificationQueue: 'NotificationQueue',
  NotificationLog: 'NotificationLog',
  ExportJob: 'ExportJob',
  FileQuota: 'FileQuota',
  Session: 'Session',
  SessionActivity: 'SessionActivity',
  SessionEventLog: 'SessionEventLog',
  ConcurrentSessionLimit: 'ConcurrentSessionLimit',
  TemporaryPermission: 'TemporaryPermission',
  RolePermissionOverride: 'RolePermissionOverride',
  ResourceOwnership: 'ResourceOwnership',
  PermissionCheckAudit: 'PermissionCheckAudit',
  RoleHierarchy: 'RoleHierarchy'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
